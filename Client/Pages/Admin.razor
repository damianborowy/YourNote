@page "/admin"
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider ApiAuthenticationStateProvider
@inject HttpClient Http
@using YourNote.Shared.Models

@if (IsPermitted == null)
{
    <p><em>Wczytywanie...</em></p>
}
else if (IsPermitted.Value)
{
    <h1>Panel administracyjny</h1>
    <BSButton @onclick="@UpMerge">Up</BSButton><br />
    <input list="values" @bind="@DownValue" />
    <datalist id="values">
        <option value="20191217043600" />
        <option value="20191217065000" />
        <option value="20191217065600" />
    </datalist>
    <BSButton @onclick="@DownMerge">Down</BSButton>
}
else
{
    <p>
        Nie posiadasz wystarczających uprawnień by wyświetlić tą stronę.
    </p>
}

@code {
    bool? IsPermitted { get; set; } = null;
    IEnumerable<User> users = Array.Empty<User>();

    string DownValue = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        var authState = await ApiAuthenticationStateProvider.GetAuthenticationStateAsync();
        var role = ClaimsParser.Select(authState, "role");

        if (role.Equals("Admin")) IsPermitted = true;
        else return;

        users = await Http.GetJsonAsync<User[]>("/api/users");
    }

    async Task UpMerge()
    {
        var content = new StringContent("");
        await Http.PutAsync("api/admin/up", content);
    }

    async Task DownMerge()
    {
        var content = new StringContent("");
        await Http.PutAsync($"api/admin/down/{DownValue}", content);
    }
}