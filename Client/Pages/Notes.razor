@page "/notes/"
@page "/notes/{UserId}"
@using SharedModels = YourNote.Shared.Models
@inject HttpClient Http
@inject AuthenticationStateProvider ApiAuthenticationStateProvider
@using YourNote.Shared.Models
@using System.Text.Json

<div class="wrapper">
    @if (notes == null)
    {
        <p><em>Wczytywanie...</em></p>
    }
    else
    {
        foreach (var note in notes)
        {
            <Note NoteObj="@note" UserId="@UserId" @bind-Notes="notes" Tags="@tags" Lectures="@lectures" />
        }
    }
</div>

<NoteAdder UserId="@UserId" @bind-Notes="notes" Tags="@tags" Lectures="@lectures" />

@code {
    [Parameter]
    public string UserId { get; set; }

    List<SharedModels.Note> notes;
    List<string> tags = new List<string>();
    List<string> lectures = new List<string>();

    protected override async Task OnInitializedAsync()
    {
        var authService = await ApiAuthenticationStateProvider.GetAuthenticationStateAsync();
        UserId = UserId ?? ClaimsParser.Select(authService, "nameid");

        notes = await Http.GetJsonAsync<List<SharedModels.Note>>($"api/notes/{UserId}");
        var tagsArr = await Http.GetJsonAsync<List<Tag>>("api/tags");
        var lecturesArr = await Http.GetJsonAsync<List<Lecture>>("api/lectures");

        Console.WriteLine("Tags and lectures:");
        Console.WriteLine(JsonSerializer.Serialize(notes));
        Console.WriteLine(JsonSerializer.Serialize(tagsArr));
        Console.WriteLine(JsonSerializer.Serialize(lecturesArr));

        foreach (var tag in tagsArr)
        {
            foreach (var note in notes)
                if (tag.Name != null && tag.Id.ToString().Equals(note.Tag))
                    note.Tag = new MongoDB.Driver.MongoDBRef("Tags", tag.Id);

            tags.Add(tag.Name);
        }

        foreach (Lecture lecture in lecturesArr)
        {
            foreach (var note in notes)
                if (lecture.Name != null && lecture.Id.Equals(note.Lecture))
                    note.Lecture = new MongoDB.Driver.MongoDBRef("Lectures", lecture.Id);

            lectures.Add(lecture.Name);
        }
    }
}