@inject HttpClient Http
@using SharedModels = YourNote.Shared.Models
@using System.Text.Json

<BSCard Class="note" Color="@GetColorAsEnum()" @onclick=@(() => ModalRef.Show())>
    <BSCard CardType="CardType.Header">
        <span class="note__title">
            @NoteObj.Title
        </span>
    </BSCard>
    <BSCard CardType="CardType.Body">
        <BSCard CardType="CardType.Text">
            @NoteObj.Content
        </BSCard>
    </BSCard>
</BSCard>

<BSModal @ref="ModalRef" IsCentered="true" IgnoreClickOnBackdrop="true" IgnoreEscape="true">
    <BSModalHeader OnClick="@(() => ModalRef.Hide())" Class="modal__header">
        <input class="form-control text-light bg-dark modal__title flex-grow-1" @bind="@NoteObj.Title" placeholder="Tytuł" />
        <NoteDeleter NoteId="@NoteObj.Id" ModalRef="@ModalRef" Notes="@Notes" NotesChanged="@NotesChanged" />
    </BSModalHeader>
    <BSModalBody>
        <div class="modal__inputs">
            <TagField @bind-Tags="@NoteObj.Tags" />
            <LectureField @bind-Lectures="@NoteObj.Lectures" /><br />
            <label for="new-user">
                Udostępnij:
            </label>
            <input type="email" @bind="NewUserId" />
            <button @onclick="@AddNewUser">
                Dodaj
            </button><br />
            @if (NoteObj.SharesTo.Count > 0)
            {
                <p style="margin-bottom: 0;">Udostępniasz do:</p>
                <ul style="margin-bottom: 0;">
                    @foreach (var user in NoteObj.SharesTo)
                    {
                        <li>@user</li>
                    }
                </ul>
            }
        </div>
        <textarea rows="10" class="form-control text-light bg-dark modal__content" @bind="@NoteObj.Content" placeholder="Treść notatki..." />
    </BSModalBody>
    <BSModalFooter>
        <BSButton Color="BlazorStrap.Color.Primary" OnClick=@SaveNote IsDisabled="@IsNoteBeingSaved">Wyślij</BSButton>
        <BSButton Color="BlazorStrap.Color.Secondary" OnClick="@(() => ModalRef.Hide())">Anuluj</BSButton>
    </BSModalFooter>
</BSModal>

@code {
    [Parameter]
    public List<SharedModels.NotePost> Notes { get; set; }

    [Parameter]
    public EventCallback<List<SharedModels.NotePost>> NotesChanged { get; set; }

    [Parameter]
    public SharedModels.NotePost NoteObj { get; set; }

    [Parameter]
    public string UserId { get; set; }

    BSModal ModalRef;
    bool IsNoteBeingSaved = false;
    string NewUserId;

    private BlazorStrap.Color GetColorAsEnum()
    {
        return (BlazorStrap.Color)NoteObj.Color;
    }

    void AddNewUser()
    {
        Console.WriteLine(NewUserId);
        if (!String.IsNullOrWhiteSpace(NewUserId))
        {
            NoteObj.SharesTo.Add(NewUserId);
            NewUserId = null;
        }
    }

    async Task SaveNote()
    {
        IsNoteBeingSaved = true;
        NoteObj.OwnerId = UserId;
        if (NoteObj.SharesTo.Count > 0)
            await Http.PutJsonAsync<SharedModels.NotePost>("/api/shares/", NoteObj);
        else
            await Http.PutJsonAsync<SharedModels.NotePost>("/api/notes/", NoteObj);
        IsNoteBeingSaved = false;

        ModalRef.Hide();
    }
}