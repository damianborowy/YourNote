@inject HttpClient Http
@using SharedModels = YourNote.Shared.Models
@using System.Text.Json

<BSButton Color="BlazorStrap.Color.Primary" @onclick="(() => ModalRef.Show())" Class="adder">
    <img src="/img/plus.svg" />
</BSButton>

<BSModal @ref="ModalRef" IsCentered="true" IgnoreClickOnBackdrop="true" IgnoreEscape="true">
    <BSModalHeader OnClick="@(() => ModalRef.Hide())">
        <input class="form-control text-light bg-dark modal__title" @bind="@note.Title" placeholder="Tytuł" />
    </BSModalHeader>
    <BSModalBody>
        <div class="modal__inputs">
            <TagField @bind-Tag="Tag" Tags="@Tags" />
            <LectureField @bind-Lecture="Lecture" Lectures="@Lectures" />
        </div>
        <textarea rows="10" class="form-control text-light bg-dark modal__content" @bind="@note.Content" placeholder="Treść notatki..." />
    </BSModalBody>
    <BSModalFooter>
        <BSButton Color="BlazorStrap.Color.Primary" OnClick=@SaveNote IsDisabled="@IsNoteBeingSaved">Wyślij</BSButton>
        <BSButton Color="BlazorStrap.Color.Secondary" OnClick="@(() => ModalRef.Hide())">Anuluj</BSButton>
    </BSModalFooter>
</BSModal>

@code {
    [Parameter]
    public List<SharedModels.NotePost> Notes { get; set; }

    [Parameter]
    public EventCallback<List<SharedModels.NotePost>> NotesChanged { get; set; }

    [Parameter]
    public string UserId { get; set; }

    [Parameter]
    public List<string> Tags { get; set; }

    [Parameter]
    public List<string> Lectures { get; set; }

    SharedModels.NotePost note = new SharedModels.NotePost();

    string Tag;
    string Lecture;

    BSModal ModalRef;
    bool IsNoteBeingSaved = false;

    async Task SaveNote()
    {
        note.OwnerId = UserId;
        note.Tags = Tag.Split(' ').ToList();
        note.Lectures = Lecture.Split(' ').ToList();

        IsNoteBeingSaved = true;
        var result = await Http.PostJsonAsync<SharedModels.NotePost>($"/api/notes/", note);
        IsNoteBeingSaved = false;

        result.Tags = Tag.Split(' ').ToList();
        result.Lectures = Lecture.Split(' ').ToList();

        Notes.Add(result);
        await NotesChanged.InvokeAsync(Notes);

        note = new SharedModels.NotePost();
        Tag = null;
        Lecture = null;

        ModalRef.Hide();
    }
}