@inject HttpClient Http
@using SharedModels = YourNote.Shared.Models
@using System.Text.Json

<BSButton Color="BlazorStrap.Color.Primary" @onclick="(() => ModalRef.Show())">
    Dodaj
</BSButton>

<BSModal @ref="ModalRef" IsCentered="true" IgnoreClickOnBackdrop="true" IgnoreEscape="true">
    <BSModalHeader OnClick="@(() => ModalRef.Hide())">
        <input class="form-control text-light bg-dark modal__title" @bind="@note.Title" placeholder="Tytuł" />
    </BSModalHeader>
    <BSModalBody>
        <textarea rows="10" class="form-control text-light bg-dark modal__content" @bind="@note.Content" placeholder="Treść notatki..." />
    </BSModalBody>
    <BSModalFooter>
        <BSButton Color="BlazorStrap.Color.Primary" OnClick=@SaveNote IsDisabled="@IsNoteBeingSaved">Wyślij</BSButton>
        <BSButton Color="BlazorStrap.Color.Secondary" OnClick="@(() => ModalRef.Hide())">Anuluj</BSButton>
    </BSModalFooter>
</BSModal>

@code {
    [Parameter]
    public string UserId { get; set; }

    SharedModels.NotePost note = new SharedModels.NotePost();

    BSModal ModalRef;
    bool IsNoteBeingSaved = false;

    async Task SaveNote()
    {
        note.OwnerId = Int32.Parse(UserId);

        IsNoteBeingSaved = true;
        var result = await Http.PostJsonAsync<SharedModels.Note>($"/api/notes/", note);
        IsNoteBeingSaved = false;

        note = new SharedModels.NotePost();

        ModalRef.Hide();
    }
}